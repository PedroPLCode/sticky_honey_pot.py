import re

attack_patterns = [
    # SQL Injection
    (r"(?i)(\bunion\b|\bselect\b.*\bfrom\b|\binformation_schema\b|\bor\s+\d=\d|\b'--|\b\"--)", "SQL Injection"),
    (r"(?i)(\bxp_cmdshell\b|\bsleep\(\d+\)|benchmark\(\d+,)", "Time-Based SQLi"),

    # XSS
    (r"(?i)<script.*?>.*?</script.*?>", "XSS (Script Tag)"),
    (r"(?i)(onerror|onload|alert\()", "XSS (Event Handler)"),
    (r"(?i)(<iframe|<img.*?src=javascript:)", "XSS (JS Injection)"),

    # Local File Inclusion / Directory Traversal
    (r"\.\./|\.\.\\", "Path Traversal / LFI"),

    # Remote File Inclusion
    (r"http[s]?://.*\.(php|txt|sh)", "RFI (Remote File Inclusion)"),

    # Command Injection
    (r";\s*(cat|ls|whoami|id|wget|curl|nc|bash|sh)", "Command Injection"),
    (r"`.*?`", "Command Injection (Backticks)"),

    # PHP/RFI Shells
    (r"\?cmd=|\?exec=|\?shell=", "Web Shell Access"),

    # SSTI (Server-Side Template Injection)
    (r"\{\{.*?\}\}", "SSTI"),

    # LDAP Injection
    (r"\(|\)|\*|\&|\|", "LDAP Injection"),

    # XML External Entity
    (r"<!DOCTYPE\s+[^>]*\s+\[.*?ENTITY", "XXE (XML External Entity)"),

    # SSRF
    (r"http://127\.0\.0\.1|http://localhost", "SSRF"),

    # Other
    (r"base64_decode\(|eval\(|system\(", "Code Execution / Obfuscation"),
]

def detect_exploit(data):
    data = data.lower()
    matched_threats = []

    for pattern, threat_name in attack_patterns:
        if re.search(pattern, data):
            matched_threats.append(threat_name)

    return list(set(matched_threats)) if matched_threats else None


def classify_threat(threats):
    score = 0
    severity_map = {
        "SQL Injection": 4,
        "XSS": 3,
        "Command Injection": 5,
        "RFI": 4,
        "LFI": 3,
        "SSTI": 3,
        "LDAP Injection": 2,
        "XXE": 3,
        "SSRF": 3,
        "Web Shell Access": 5,
        "Path Traversal": 2,
        "Time-Based SQLi": 4,
    }

    for threat in threats:
        for key in severity_map:
            if key.lower() in threat.lower():
                score += severity_map[key]

    if score >= 8:
        return "High"
    elif score >= 4:
        return "Medium"
    else:
        return "Low"
